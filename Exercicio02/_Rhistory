AnomalyDetectionVec(raw_data[,2], max_anoms=0.02, period=1440, direction='both', only_last=FALSE, plot=TRUE)
AnomalyDetectionVec(raw_data[,2], max_anoms=0.02, period=1440, direction='both', only_last=FALSE, plot=TRUE)
res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', only_last=”day”, plot=TRUE)
res$plot
help(AnomalyDetectionTs)
data
raw_data
type(raw_data)
typeof(raw_data)
typeof(raw_data[timestamp])
summary(raw_data)
str(raw_data)
dataset02$date <- as.Date(dataset02$date)
ValoresAgregados <- aggregate(dataset02$Quantidade, by=list(Category=dataset02$date), FUN=sum)
str(ValoresAgregados)
names(ValoresAgregados) <- c("date", "Quantidade")
ValoresAgregados
data(ValoresAgregados)
str(ValoresAgregados)
str(raw_data)
names(ValoresAgregados) <- c("timestamp", "count")
str(ValoresAgregados)
data(raw_data)
res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
data(ValoresAgregados)
res = AnomalyDetectionTs(ValoresAgregados, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
data
str(ValoresAgregados)
str(raw_data)
ValoresAgregados[timestamp]
ValoresAgregados['timestamp']
str(ValoresAgregados)
str(raw_data)
ValoresAgregados['timestamp'] = as.POSIXlt(ValoresAgregados['timestamp'])
help(AnomalyDetectionTs)
ValoresAgregados$timestamp = as.POSIXlt(ValoresAgregados$timestamp)
str(ValoresAgregados)
str(raw_data)
data(ValoresAgregados)
res = AnomalyDetectionTs(ValoresAgregados, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
AnomalyDetectionVec(ValoresAgregados[,2], max_anoms=0.02, period=1440, direction='both', only_last=FALSE, plot=TRUE)
AnomalyDetectionVec(ValoresAgregados[,2], max_anoms=0.02, period=12, direction='both', only_last=FALSE, plot=TRUE)
str(dataset02)
dataset02$date <- as.as.POSIXlt(dataset02$date)
dataset02$date <- as.POSIXlt(dataset02$date)
str(dataset02)
data(dataset02)
res = AnomalyDetectionTs(dataset02, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
AnomalyDetectionVec(dataset02[,2], max_anoms=0.02, period=12, direction='both', only_last=FALSE, plot=TRUE)
res = AnomalyDetectionTs(dataset02, max_anoms=0.02, direction='both', only_last=day, plot=TRUE)
res = AnomalyDetectionTs(dataset02, max_anoms=0.02, direction='both', only_last='day', plot=TRUE)
AnomalyDetectionVec(dataset02[,2], max_anoms=0.02, period=1440, direction='both', only_last=FALSE, plot=TRUE)
AnomalyDetectionVec(dataset02[,2], max_anoms=0.02, period=12, direction='both', only_last=FALSE, plot=TRUE)
help(AnomalyDetectionTs)
dataset03 <- dataset[,c(12,19)]
names(dataset03) <- c("date", "Valor")
str(dataset03)
dataset03$date <- as.Date(dataset03$date)
ValoresAgregados02 <- aggregate(dataset03$Valor, by=list(Category=dataset03$date), FUN=sum)
str(ValoresAgregados02)
dataset03$date <- as.POSIXlt(dataset03$date)
str(dataset03)
data(dataset03)
res = AnomalyDetectionTs(dataset03, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
data(dataset02)
res = AnomalyDetectionTs(dataset02, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
data(dataset03)
res = AnomalyDetectionTs(dataset03, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
AnomalyDetectionVec(dataset03[,2], max_anoms=0.02, period=12, direction='both', only_last=FALSE, plot=TRUE)
devtools::install_github("twitter/BreakoutDetection")
library(BreakoutDetection)
devtools::install_github("twitter/BreakoutDetection")
library(BreakoutDetection)
data(ValoresAgregados)
res = AnomalyDetectionTs(ValoresAgregados, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
data(dataset02)
res = AnomalyDetectionTs(dataset02, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
data(dataset03)
res = AnomalyDetectionTs(dataset03, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
help(AnomalyDetectionTs)
data(dataset02)
res = AnomalyDetectionTs(dataset02, max_anoms=0.02, direction='both', plot=TRUE, title = "dataset02")
res$plot
res
data(dataset02)
str(raw_data)
str(dataset02)
load("C:/Users/Tec/Downloads/raw_data.rda")
load("C:/Users/Tec/Downloads/raw_data.rda")
raw_data
res = AnomalyDetectionTs(dataset02, max_anoms=0.02, direction='both', plot=TRUE, title = "dataset02")
help(AnomalyDetectionTs)
res = AnomalyDetectionTs(dataset02, max_anoms=0.02, direction='both', plot=TRUE, title = "dataset02",piecewise_median_period_weeks = 2)
res = AnomalyDetectionTs(dataset02, max_anoms=0.02, direction='both', plot=TRUE, title = "dataset02",piecewise_median_period_weeks = 1)
res = AnomalyDetectionTs(dataset02, max_anoms=0.02, direction='both', plot=TRUE, title = "dataset02",piecewise_median_period_weeks = 10)
res = AnomalyDetectionTs(dataset02, max_anoms=0.05, direction='both', plot=TRUE, period = 12, only_last = FALSE, title = "dataset02")
res = AnomalyDetectionTs(dataset02, max_anoms=0.05, direction='both', plot=TRUE, period = 1, only_last = FALSE, title = "dataset02")
res = AnomalyDetectionTs(dataset02, max_anoms=0.05, direction='both', plot=TRUE, period = 60, only_last = FALSE, title = "dataset02")
res = AnomalyDetectionTs(ValoresAgregados, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
data(ValoresAgregados)
res = AnomalyDetectionTs(ValoresAgregados, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
res = AnomalyDetectionTs(ValoresAgregados, max_anoms=0.02, direction='both', plot=TRUE, title = "ValoresAgregados")
res$plot
res = AnomalyDetectionTs(dataset02, max_anoms=0.05, direction='both', plot=TRUE, title = "dataset02")
AnomalyDetectionVec(ValoresAgregados[,2], max_anoms=0.02, period=12, direction='both', only_last=FALSE, plot=TRUE)
ValoresAgregados02 <- aggregate(dataset03$Valor, by=list(Category=dataset03$date), FUN=sum)
dataset03 <- dataset[,c(12,19)]
names(dataset03) <- c("date", "Valor")
str(dataset03)
dataset03$date <- as.Date(dataset03$date)
ValoresAgregados02 <- aggregate(dataset03$Valor, by=list(Category=dataset03$date), FUN=sum)
names(ValoresAgregados02) <- c("timestamp", "count")
ValoresAgregados02$timestamp = as.POSIXlt(ValoresAgregados02$timestamp)
res = AnomalyDetectionTs(ValoresAgregados02, max_anoms=0.02, direction='both', plot=TRUE, title = "ValoresAgregados02")
res$plot
library(forecast)
windTS <-ts(ValoresAgregados, frequency = 1)
windTS
str(windTS)
fit <- auto.arima(windTS)
fit <- auto.arima(ValoresAgregados)
windTS <-ts(ValoresAgregados, start = c(2017,11,1),frequency = 1)
str(windTS)
packages =  c("ggplot2", "dplyr", "tidyr", "data.table", 'corrplot', 'gridExtra', 'forecast', 'tseries', 'TSA', 'tibble', 'TTR', 'xts', 'dygraphs', 'assertthat')
my.install <- function(pkg, ...){
if (!(pkg %in% installed.packages()[,1])) {
install.packages(pkg)
}
return (library(pkg, ...))
}
purrr::walk(packages, my.install, character.only = TRUE, warn.conflicts = FALSE)
sample_num = 5
s_data  <- dataset[,c(12,18,19)]
summary(s_data)
str(s_data)
s_data[is.na(s_data)] <- 0
s_data$DataPedido <- as.Date(s_data$DataPedido, format = "%Y-%m-%d")
summary(s_data)
str(s_data)
options(repr.plot.width=12, repr.plot.height=12)
p1 = ggplot(s_data, aes(Quantidade)) + geom_histogram(bins = 50, aes(y = ..density..), col = "red", fill = "red", alpha = 0.3) + geom_density()# + xlim(c(0, 1000))
p2 = ggplot(s_data, aes(Valor)) + geom_histogram(bins = 50, aes(y = ..density..), col = "red", fill = "red", alpha = 0.3) + geom_density()# + xlim(c(0, 1000))
grid.arrange(p1,p2, nrow=1,ncol=2)
tmp <- s_data
assert_that(sample_num < length(unique(tmp$Name)))
s_data  <- dataset[,c(12,18,19,4)]
s_data
s_data[is.na(s_data)] <- 0
s_data$DataPedido <- as.Date(s_data$DataPedido, format = "%Y-%m-%d")
summary(s_data)
options(repr.plot.width=12, repr.plot.height=12)
p1 = ggplot(s_data, aes(Quantidade)) + geom_histogram(bins = 50, aes(y = ..density..), col = "red", fill = "red", alpha = 0.3) + geom_density()# + xlim(c(0, 1000))
p2 = ggplot(s_data, aes(Valor)) + geom_histogram(bins = 50, aes(y = ..density..), col = "red", fill = "red", alpha = 0.3) + geom_density()# + xlim(c(0, 1000))
grid.arrange(p1,p2, nrow=1,ncol=2)
tmp <- s_data
length(unique(tmp$Estado))
assert_that(sample_num < length(unique(tmp$Estado)))
sample_ticker <- as.character(sample(tmp$Estado, sample_num))
#sample_ticker <- c(sample_ticker, 'GOOGL')
candidate_ticker <- unique(sample_ticker)
candidate_ticker <- c("RJ", "SP")
candidate_num <- length(candidate_ticker)
stock_list <- vector(mode="list", length=candidate_num)
names(stock_list) <- candidate_ticker
i = 1
for (ticker in candidate_ticker){
stock_list[[i]] <- filter(s_data, Estado == ticker)
# print(stock_list[[i]])
i <- i+1
# print(ticker)
}
str(stock_list)
xts_list <- vector(mode="list", length=candidate_num)
ts_list <- vector(mode="list", length=candidate_num)
names(xts_list) = candidate_ticker
names(ts_list) = candidate_ticker
for (ticker in candidate_ticker){
stock = stock_list[[ticker]]
xts = xts(stock$Close, order.by=stock$Date)
attr(xts, 'frequency') <- length(xts)/12
ts = as.ts(xts, start = c(2017))
xts_list[[ticker]] <- xts
ts_list[[ticker]] <- ts
}
xts_table= do.call(cbind, xts_list)
dygraph(xts_table, xlab = "Time", ylab = "High value", main = "Time Series") %>%
# dySeries(labels.default()) %>%
# dyOptions(colors = c("red")) %>%
dyRangeSelector()
xts_list <- vector(mode="list", length=candidate_num)
ts_list <- vector(mode="list", length=candidate_num)
names(xts_list) = candidate_ticker
names(ts_list) = candidate_ticker
for (ticker in candidate_ticker){
stock = stock_list[[ticker]]
xts = xts(stock$Close, order.by=stock$Date)
attr(xts, 'frequency') <- length(xts)/12
ts = as.ts(xts, start = c(2017))
xts_list[[ticker]] <- xts
ts_list[[ticker]] <- ts
}
xts_table= do.call(cbind, xts_list)
dygraph(xts_table, xlab = "DataPedido", ylab = "Quantidade", main = "Time Series") %>%
# dySeries(labels.default()) %>%
# dyOptions(colors = c("red")) %>%
dyRangeSelector()
for (ticker in candidate_ticker){
stock = stock_list[[ticker]]
#xts = xts(stock$Close, order.by=stock$Date)
attr(xts, 'frequency') <- length(xts)/12
ts = as.ts(xts, start = c(2017))
xts_list[[ticker]] <- xts
ts_list[[ticker]] <- ts
}
for (ticker in candidate_ticker){
stock = stock_list[[ticker]]
xts = xts(stock$Quantidade, order.by=stock$DataPedido)
attr(xts, 'frequency') <- length(xts)/12
ts = as.ts(xts, start = c(2017))
xts_list[[ticker]] <- xts
ts_list[[ticker]] <- ts
}
xts_table= do.call(cbind, xts_list)
dygraph(xts_table, xlab = "DataPedido", ylab = "Quantidade", main = "Time Series") %>%
# dySeries(labels.default()) %>%
# dyOptions(colors = c("red")) %>%
dyRangeSelector()
for (ticker in candidate_ticker){
stock = stock_list[[ticker]]
xts = xts(stock$Quantidade, order.by=stock$DataPedido)
attr(xts, 'frequency') <- length(xts)/365
ts = as.ts(xts, start = c(2017))
xts_list[[ticker]] <- xts
ts_list[[ticker]] <- ts
}
xts_table= do.call(cbind, xts_list)
dygraph(xts_table, xlab = "DataPedido", ylab = "Quantidade", main = "Time Series") %>%
# dySeries(labels.default()) %>%
# dyOptions(colors = c("red")) %>%
dyRangeSelector()
for (ticker in candidate_ticker){
stock = stock_list[[ticker]]
xts = xts(stock$Quantidade, order.by=stock$DataPedido)
attr(xts, 'frequency') <- length(xts)/12
ts = as.ts(xts, start = c(2017))
xts_list[[ticker]] <- xts
ts_list[[ticker]] <- ts
}
xts_table= do.call(cbind, xts_list)
dygraph(xts_table, xlab = "DataPedido", ylab = "Quantidade", main = "Time Series") %>%
# dySeries(labels.default()) %>%
# dyOptions(colors = c("red")) %>%
dyRangeSelector()
for (ticker in candidate_ticker){
stock = stock_list[[ticker]]
xts = xts(stock$Valor, order.by=stock$DataPedido)
attr(xts, 'frequency') <- length(xts)/12
ts = as.ts(xts, start = c(2017))
xts_list[[ticker]] <- xts
ts_list[[ticker]] <- ts
}
xts_table= do.call(cbind, xts_list)
dygraph(xts_table, xlab = "DataPedido", ylab = "Valor", main = "Time Series") %>%
# dySeries(labels.default()) %>%
# dyOptions(colors = c("red")) %>%
dyRangeSelector()
ts_list
adf.test(xts, alternative = "stationary", k = 0)
xts = xts_list
ts = ts_list
adf.test(xts, alternative = "stationary", k = 0)
xts = xts_list[['RJ']]
ts = ts_list[['RJ']]
adf.test(xts, alternative = "stationary", k = 0)
xts = xts_list[['SP']]
ts = ts_list[['SP']]
adf.test(xts, alternative = "stationary", k = 0)
xts = xts_list['SP','RJ']
xts = xts_list[['SP','RJ']]
xts = xts_list[['SP']]
ts = ts_list[['SP']]
adf.test(xts, alternative = "stationary", k = 0)
tscomponents_add <- decompose(ts, type = "additive")
tscomponents_mul <- decompose(ts, type = "multiplicative")
plot(tscomponents_add, col = "red")
plot(tscomponents_mul, col = "blue")
xtsdiff1 <- diff(xts, differences=1)
tsdiff1 <- diff(ts, differences=1)
plot.xts(xtsdiff1, col = "blue")
adf.test(tsdiff1, alternative = "stationary", k = 0)
findfrequency(xts)
findfrequency(xtsdiff1)
Acf(xtsdiff1, lag.max=60)
Acf(xtsdiff1, lag.max=60, plot=FALSE)
Pacf(xtsdiff1, lag.max=60)
Pacf(xtsdiff1, lag.max=60, plot=FALSE)
tsarima240 <- auto.arima(head(xts, -240), max.p = 3, max.q = 3, max.d = 3) # excluding last 240 time series as test data
print(tsarima240)
tsforecasts240 <- forecast(tsarima240, h = 240) # forecast the next 240 time series
autoplot(tsforecasts240)
accuracy(tsforecasts240, head(tail(xts, 240), 240))
accuracy(tsforecasts240, head(tail(xts, 240), 120))
accuracy(tsforecasts240, head(tail(xts, 240), 60))
ggplot(data.frame(residuals = tsforecasts240$residuals), aes(residuals)) + geom_histogram(bins = 50, aes(y = ..density..), col = "red", fill = "red", alpha = 0.3) + geom_density()# make a histogram
checkresiduals(tsforecasts240)
setwd("C:/Users/Tec/Google Drive/Uni7 - Ramses/programação para data cience/Uni7/Exercicio2/Exercicio02ok")
setwd("C:/Users/Tec/Desktop/trabalho/Exercicio2/Exercicio02ok")
getwd()
install.packages("openair")
install.packages("lubridate")
library(openair)
library(lubridate)
dataset <- read.csv("database.csv", sep = ";",header = TRUE)
View(dataset)
str(dataset)
install.packages("openair")
install.packages("lubridate")
library(openair)
library(lubridate)
library(openair)
library(lubridate)
dataset <- read.csv("database.csv", sep = ";",header = TRUE)
str(dataset)
dataset02 <- dataset[,c(12,18)]
names(dataset02) <- c("date", "Quantidade")
str(dataset02)
dataset02$date <- as.Date(dataset02$date)
ValoresAgregados <- aggregate(dataset02$Quantidade, by=list(Category=dataset02$date), FUN=sum)
str(ValoresAgregados)
summary(ValoresAgregados)
names(ValoresAgregados) <- c("date", "Quantidade")
summary(ValoresAgregados)
calendarPlot(mydata=ValoresAgregados, pollutant = "Quantidade", year = 2017, month = 1:12,
main = "Quantidade Comprada diariamente 2017",limits = c(0, 700) )
dataset03 <- dataset[,c(12,19)]
names(dataset03) <- c("date", "Valor")
str(dataset03)
dataset03$date <- as.Date(dataset03$date)
ValoresAgregados02 <- aggregate(dataset03$Valor, by=list(Category=dataset03$date), FUN=sum)
str(ValoresAgregados02)
summary(ValoresAgregados02)
names(ValoresAgregados02) <- c("date", "Valor")
calendarPlot(mydata=ValoresAgregados02, pollutant = "Valor", year = 2017, month = 1:12,
main = "Valor Comprada diariamente 2017",limits = c(100, 4500) )
calendarPlot(mydata=ValoresAgregados02, pollutant = "Valor", year = 2017, month = 1:12,
main = "Valor Comprado diariamente 2017",limits = c(100, 4500) )
res = AnomalyDetectionTs(ValoresAgregados, max_anoms=0.02, direction='both', plot=TRUE, title = "ValoresAgregados")
res$plot
AnomalyDetectionVec(ValoresAgregados[,2], max_anoms=0.02, period=12, direction='both', only_last=FALSE, plot=TRUE)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("twitter/AnomalyDetection")
library(AnomalyDetection)
help(AnomalyDetectionTs)
str(ValoresAgregados)
str(raw_data)
names(ValoresAgregados) <- c("timestamp", "count")
ValoresAgregados$timestamp = as.POSIXlt(ValoresAgregados$timestamp)
res = AnomalyDetectionTs(ValoresAgregados, max_anoms=0.02, direction='both', plot=TRUE, title = "Valores Agregados Quantidade")
res$plot
AnomalyDetectionVec(ValoresAgregados[,2], max_anoms=0.02, period=12, direction='both', only_last=FALSE, plot=TRUE)
res = AnomalyDetectionTs(ValoresAgregados02, max_anoms=0.02, direction='both', plot=TRUE, title = "Valores Agregados02 Valor")
res$plot
names(ValoresAgregados02) <- c("timestamp", "Valor")
ValoresAgregados02$timestamp = as.POSIXlt(ValoresAgregados02$timestamp)
res = AnomalyDetectionTs(ValoresAgregados02, max_anoms=0.02, direction='both', plot=TRUE, title = "Valores Agregados02 Valor")
res$plot
packages =  c("ggplot2", "dplyr", "tidyr", "data.table", 'corrplot', 'gridExtra', 'forecast', 'tseries', 'TSA', 'tibble', 'TTR', 'xts', 'dygraphs', 'assertthat')
my.install <- function(pkg, ...){
if (!(pkg %in% installed.packages()[,1])) {
install.packages(pkg)
}
return (library(pkg, ...))
}
purrr::walk(packages, my.install, character.only = TRUE, warn.conflicts = FALSE)
sample_num = 5
s_data  <- dataset[,c(12,18,19,4)]
summary(s_data)
str(s_data)
s_data[is.na(s_data)] <- 0
s_data$DataPedido <- as.Date(s_data$DataPedido, format = "%Y-%m-%d")
summary(s_data)
str(s_data)
options(repr.plot.width=12, repr.plot.height=12)
p1 = ggplot(s_data, aes(Quantidade)) + geom_histogram(bins = 50, aes(y = ..density..), col = "red", fill = "red", alpha = 0.3) + geom_density()# + xlim(c(0, 1000))
p2 = ggplot(s_data, aes(Valor)) + geom_histogram(bins = 50, aes(y = ..density..), col = "red", fill = "red", alpha = 0.3) + geom_density()# + xlim(c(0, 1000))
grid.arrange(p1,p2, nrow=1,ncol=2)
tmp <- s_data
length(unique(tmp$Estado))
sample_ticker <- as.character(sample(tmp$Estado, sample_num))
#sample_ticker <- c(sample_ticker, 'GOOGL')
candidate_ticker <- unique(sample_ticker)
candidate_ticker <- c("RJ", "SP")
candidate_num <- length(candidate_ticker)
stock_list <- vector(mode="list", length=candidate_num)
names(stock_list) <- candidate_ticker
i = 1
for (ticker in candidate_ticker){
stock_list[[i]] <- filter(s_data, Estado == ticker)
# print(stock_list[[i]])
i <- i+1
# print(ticker)
}
str(stock_list)
xts_list <- vector(mode="list", length=candidate_num)
ts_list <- vector(mode="list", length=candidate_num)
names(xts_list) = candidate_ticker
names(ts_list) = candidate_ticker
for (ticker in candidate_ticker){
stock = stock_list[[ticker]]
xts = xts(stock$Quantidade, order.by=stock$DataPedido)
attr(xts, 'frequency') <- length(xts)/12
ts = as.ts(xts, start = c(2017))
xts_list[[ticker]] <- xts
ts_list[[ticker]] <- ts
}
xts_table= do.call(cbind, xts_list)
dygraph(xts_table, xlab = "DataPedido", ylab = "Quantidade", main = "Time Series") %>%
# dySeries(labels.default()) %>%
# dyOptions(colors = c("red")) %>%
dyRangeSelector()
dygraph(xts_table, xlab = "DataPedido", ylab = "Quantidade", main = "Time Series") %>%
# dySeries(labels.default()) %>%
# dyOptions(colors = c("red")) %>%
dyRangeSelector()
xts = xts_list
ts = ts_list
adf.test(xts, alternative = "stationary", k = 0)
xts_list
xts = xts_list[['SP']]
xts
xts = xts_list[['RJ']]
xts
xts = xts_list[['RJ','SP']]
xts = xts_list[['']]
xts
xts = xts_list[['SP']]
xts2 = xts_list[['RJ']]
xts = xts + xts2
xts
xts
xts2
View(xts2)
View(xts)
xts = xts_list[['SP']]
xts2 = xts_list[['RJ']]
View(xts)
View(xts2)
xtsT = xts + xts2
View(xtsT)
xts_list
ts_list
View(xts)
xtsT = xts(merge(xts2))
xtsT
xtsT = xts(add_row(xts2))
xtsT = merge(xts,xts2)
View(xtsT)
require(plyr)
xtsT = join(xts,xts2,type="inner")
xtsT = join(xts,xts2)
xtsT = rbind(xts,xts2)
View(xtsT)
xts = rbind(xts1,xts2)
xts1 = xts_list[['SP']]
xts2 = xts_list[['RJ']]
xts = rbind(xts1,xts2)
ts = ts_list
adf.test(xts, alternative = "stationary", k = 0)
tscomponents_add <- decompose(ts, type = "additive")
tscomponents_mul <- decompose(ts, type = "multiplicative")
tscomponents_add <- decompose(ts, type = "additive")
tscomponents_add <- decompose(ts, type = "additive")
ts
tscomponents_add <- decompose(xts, type = "additive")
tscomponents_mul <- decompose(xts, type = "multiplicative")
plot(tscomponents_add, col = "red")
plot(tscomponents_mul, col = "blue")
xtsdiff1 <- diff(xts, differences=1)
plot.xts(xtsdiff1, col = "blue")
adf.test(tsdiff1, alternative = "stationary", k = 0)
findfrequency(xts)
findfrequency(xtsdiff1)
Acf(xtsdiff1, lag.max=60)
Pacf(xtsdiff1, lag.max=60)
tsarima240 <- auto.arima(head(xts, -240), max.p = 3, max.q = 3, max.d = 3) # excluding last 240 time series as test data
print(tsarima240)
tsforecasts240 <- forecast(tsarima240, h = 240) # forecast the next 240 time series
autoplot(tsforecasts240)
tsarima30 <- auto.arima(head(xts, -30), max.p = 3, max.q = 3, max.d = 3) # excluding last 240 time series as test data
print(tsarima30)
tsforecasts30 <- forecast(tsarima30, h = 240) # forecast the next 240 time series
autoplot(tsforecasts30)
accuracy(tsforecasts30, head(tail(xts, 30), 30))
tsforecasts30 <- forecast(tsarima30, h = 30) # forecast the next 30 time series
autoplot(tsforecasts30)
tsforecasts30 <- forecast(tsarima30, h = 500) # forecast the next 30 time series
autoplot(tsforecasts30)
ggplot(data.frame(residuals = tsforecasts30$residuals), aes(residuals)) + geom_histogram(bins = 50, aes(y = ..density..), col = "red", fill = "red", alpha = 0.3) + geom_density()# make a histogram
checkresiduals(tsforecasts30)
